#! /usr/bin/env bash

# shellcheck disable=SC1090,SC1091,SC2016

# check that DOTFILES variable is defined
source "${BASH_SOURCE%/*}/../check_dotfiles_variable.sh"

source "$DOTFILES/infra/scripts/prompts.sh"

main() {
  info 'setting up `nix` (manages these dotfiles)'

  setup_nix || exit 1

  # TODO: confirm that this is actually necessary
  maybe_add_channel_distributed_tooling_to_nix_path

  maybe_setup_home_manager || exit 1

  maybe_setup_nix_darwin || exit 1 # only runs on macOS (darwin)

  setup_flakes || echo "Failed to install flakes"

  apply_first_generation || echo "Failed to apply first generation"

  success '`nix` (and various pieces) setup complete'
}

apply_first_generation() {
  info 'setting up first generation'

  "$DOTFILES/nix/apply" && {
    # TODO: enter new shell here?
    # zsh --interactive
    success "Successfully applied first generation!"
  }
}

setup_nix() {
  command -v nix-env > /dev/null && {
    info 'skipping `nix` installation since `nix-env` is invokable'
    return 0
  }

  # macOS (as of Catalina) makes the root (`/`) read-only
  # `nix` can work around this by creating a "synthetic" directory at `/nix` and
  # mounting a separate volume which holds the actual contents
  #
  # As the ref below points out, "unencrypted" is a bit of a misnomer. Any Mac
  # with a T2 chip will still be encrypted at rest
  #
  # ref - https://nixos.org/nix/manual/#sect-macos-installation
  local MAC_INSTALLATION_FLAGS
  "$DOTFILES/infra/scripts/is_macos.sh" && {
    MAC_INSTALLATION_FLAGS='--darwin-use-unencrypted-nix-store-volume'
  }

  # `--daemon` enables multiuser install
  # on multiuser install no need to source `nix` activation script, done by
  # daemon?
  # TODO: explain why multiuser and differences w/ single-user install
  # https://nixos.org/nix/manual/#sect-multi-user-installation
  sh <(curl -L https://nixos.org/nix/install) \
    --daemon \
    "$MAC_INSTALLATION_FLAGS"

  # initialize `nix` for next steps - same lines added to /etc/zshrc by installer
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    # shellcheck disable=SC1091
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi

  command -v nix-env > /dev/null || {
    fail "Nix installation finished but the \`nix-env\` binary is not available.
 Please fix any issues and try again."
    return 1
  }

  success '`nix` installed'
}

maybe_setup_home_manager() {
  "$DOTFILES/infra/scripts/is_macos.sh" && {
    info "skipping \`home-manager\` installation on macOS system - managed via
 \`home-manager\` module in \`nix-darwin\` config on macOS"
    return 0
  }

  info "setting up home-manager"

  maybe_install_home_manager || return 1

  # switch to home-manager config
  home-manager switch || {
    fail '`home-manager` setup failed on `home-manager switch`'
    return 1
  }

  success '`home-manager` setup complete'
}

# manages macOS-specific config
# ref - https://github.com/LnL7/nix-darwin#install
maybe_setup_nix_darwin() {
  "$DOTFILES/infra/scripts/is_macos.sh" || {
    info 'skipping `nix-darwin` installation on non-macOS system'
    return 0
  }

  maybe_install_nix_darwin || return 1

  maybe_setup_home_manager_channel || return 1

  success '`nix-darwin` setup complete'
}

setup_flakes() {
  nix-env --install -A nixpkgs.nixFlakes || return 1

  # TODO: make just installed Nix 3.0 available
}

maybe_add_channel_distributed_tooling_to_nix_path() {
  echo "$NIX_PATH" | grep --quiet "$HOME/.nix-defexpr/channels" && {
    return 0
  }

  # make frameworks managed via channels (nix-darwin, home-manager) available
  export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
}

maybe_install_home_manager() {
  command -v home-manager > /dev/null || {
    info 'skipping `home-manager` installation since `home-manager` is invokable'
    return 0
  }

  # install home manager - https://github.com/rycee/home-manager#installation
  maybe_setup_home_manager_channel

  # symlink $DOTfiLES/nix/home.nix config in place before first generation
  # TODO: see if I can declaratively manage this in Nix
  mkdir -p "$HOME/.config/nix"
  "$DOTFILES/infra/setup/bin/link_file" \
    "$DOTFILES/nix/home.nix" \
    "$HOME/.config/nix/home.nix"

  # install & create first generation
  nix-shell '<home-manager>' -A install

  command -v home-manager > /dev/null || {
    fail "\`home-manager\` installation finished but the \`home-manager\`
 command is not invokable. Please fix any issues and try again."
    return 1
  }
}

backup_default_system_files() {
  info 'Using `sudo` to backup /etc/nix/nix.conf, /etc/zprofile & /etc/zshrc'

  # move `/etc` files so that nix-darwin can set up it's own copies
  #
  # TODO: maybe make this workaround unnecessary?
  #
  # refs:
  # - https://github.com/LnL7/nix-darwin/issues/158#issuecomment-560969421
  # - https://github.com/LnL7/nix-darwin/issues/46
  # - https://github.com/LnL7/nix-darwin/issues/2
  "$DOTFILES/infra/setup/bin/backup_file" "/etc/nix/nix.conf"
  "$DOTFILES/infra/setup/bin/backup_file" "/etc/zprofile"
  "$DOTFILES/infra/setup/bin/backup_file" "/etc/zshrc"
}

restore_default_system_files() {
  info 'Using `sudo` to restore /etc/nix/nix.conf, /etc/zprofile & /etc/zshrc'

  local nix_conf, zprofile, zshrc

  nix_conf="/etc/nix/nix.conf"
  zprofile="/etc/zprofile"
  zshrc="/etc/zshrc"

  [ -f "$nix_conf.bak" ] && sudo mv "$nix_conf.bak" "$nix_conf"
  [ -f "$zprofile.bak" ] && sudo mv "$zprofile.bak" "$zprofile"
  [ -f "$zshrc.bak" ] && sudo mv "$zshrc.bak" "$zshrc"
}

recreate_channels() {
  info 'Using `sudo` to recreate channels owned by root'

  # ref - https://github.com/LnL7/nix-darwin/issues/234
  sudo rm -rf ~/.nix-defexpr
  nix-channel --update
}

maybe_install_nix_darwin() {
  command -v darwin-rebuild > /dev/null && {
    info 'skipping `nix-darwin` installation since `darwin-rebuild` is invokable'
    return 0
  }

  info "setting up nix-darwin"

  pushd "${TMPDIR}" > /dev/null || {
    fail 'failed to push tmp directory'
    return 1
  }

  nix-build \
    https://github.com/LnL7/nix-darwin/archive/master.tar.gz \
    -A installer > /dev/null

  # backup_default_system_files

  # TODO: avoid recreating channels here
  recreate_channels

  # TODO: handle interactive prompts, pass flags to answer questions?
  info 'Running `nix-darwin` installer'
  if "${TMPDIR}/result/bin/darwin-installer"; then
    success '`nix-darwin` installed'
  else
    fail '`nix-darwin` installer failed. Please fix any issues and try again.'

    # restore_default_system_files

    return 1
  fi

  # make just installed `darwin-rebuild` command available in current script
  [ -f /etc/zshenv ] && source /etc/zshenv

  popd > /dev/null || {
    fail 'probably not really an issue: failed to pop directory'
    return 1
  }

  command -v darwin-rebuild > /dev/null || {
    fail "\`nix-darwin\` installation finished but the \`darwin-rebuild\`
 command is not invokable. Please fix any issues and try again."
    return 1
  }
}

maybe_setup_home_manager_channel() {
  # shellcheck disable=SC2210
  grep --quiet "home-manager" "$HOME/.nix-channels" > /dev/null 2>&1 || {
    # add channel for home-manager module
    # ref - https://rycee.gitlab.io/home-manager/index.html#sec-install-nix-darwin-module
    nix-channel --add \
      https://github.com/rycee/home-manager/archive/master.tar.gz \
      home-manager
    nix-channel --update
  }
}

main "$@"
