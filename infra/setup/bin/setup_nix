#! /usr/bin/env bash

# TODO: remove as many pieces as possible from this horrifying install chain
# install Nix -> install nix-darwin -> install nix with flakes -> build system with flakes using nix-darwin

# shellcheck disable=SC1090,SC1091,SC2016

# check that DOTFILES variable is defined
source "${BASH_SOURCE%/*}/../check_dotfiles_variable.sh"

source "$DOTFILES/infra/scripts/prompts.sh" || {
  # define simple fallbacks if prompts script can't be sourced
  info() {
    printf "%s\n" "$@"
  }
  fail() {
    printf "failure: %s\n" "$@"
  }
  success() {
    printf "success: %s\n" "$@"
  }
}

main() {
  info 'setting up `nix` (manages these dotfiles)'

  maybe_install_nix || exit 1

  # use just-installed `nix-darwin` to rebuild system with flakes support
  maybe_setup_flakes || exit 1

  # use nix-darwin to rebuild system with just-setup flake support
  maybe_install_home_manager || exit 1

  success '`nix` (and various pieces) setup complete'
}

maybe_install_nix() {
  if command -v nix > /dev/null || command -v nix-env /dev/null; then
    info 'skipping `nix` installation since `nix-env` is invokable'
    return 0
  fi

  # `--daemon` enables multiuser install
  # TODO: explain why multiuser and differences w/ single-user install
  # https://nixos.org/nix/manual/#sect-multi-user-installation
  #
  # pipe in `true` to automatically accept all prompts
  true | sh <(curl -L https://nixos.org/nix/install) --daemon

  # initialize `nix` for next steps - same lines added to /etc/zshrc by installer
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    # shellcheck disable=SC1091
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi

  command -v nix-env > /dev/null || {
    fail "Nix installation finished but the \`nix-env\` binary is not available.
 Please fix any issues and try again."
    return 1
  }

  success '`nix` installed'
}

# TODO: remove when switching to flakes-based installer
maybe_setup_flakes() {
  local nix_flake_error_message
  nix_flake_error_message=$(mktemp)
  nix flake 2> "$nix_flake_error_message"

  # if you have flakes: `'nix flake' requires a sub-command.`
  # if you don't:       `'flake' is not a recognised command`
  grep --quiet 'requires a sub-command' < "$nix_flake_error_message" && {
    info 'skipping flakes setup since the flake command is already enabled'
    return 0
  }

  info "setting up flakes"

  if [[ -f /etc/nix/nix.conf ]] && ! grep --quiet flakes < /etc/nix/nix.conf; then
    info 'Using `sudo` to backup /etc/nix/nix.conf -> /etc/nix/nix.conf.bak'
    sudo mv /etc/nix/nix.conf /etc/nix/nix.conf.bak

    local nix_conf
    nix_conf=$(mktemp)
    cat /etc/nix/nix.conf.bak > "$nix_conf"
    echo "experimental-features = nix-command flakes" >> "$nix_conf"
    sudo mv "$nix_conf" /etc/nix/nix.conf
  fi

  # if
  #   darwin-rebuild \
  #     -I darwin="$HOME/.nix-defexpr/channels/darwin" \
  #     -I darwin-config="$DOTFILES/nix/darwin-first-generation.nix" \
  #     switch
  # then
  #   success 'Established first generation. Nix flakes now available.'
  # else
  #   fail "Failed to set up first flake generation."
  #   return 1
  # fi

  info "Checking \`nix\` version after flake setup: $(nix --version)"
}

# manages macOS-specific config
# ref - https://github.com/LnL7/nix-darwin#install
maybe_install_home_manager() {
  command -v home-manager > /dev/null && {
    info 'skipping `home-manager` installation since `home-manager` is invokable'
    return 0
  }

  info "setting up home-manager"

  local BUILD_DIR
  BUILD_DIR=$(dirname $(mktemp))
  pushd "$BUILD_DIR" > /dev/null || {
    fail 'failed to push tmp directory'
    return 1
  }

  info "building home-manager installer"
  nix build "$DOTFILES/nix#homeConfigurations.nathan.activationPackage" || {
    fail "failed to build \`home-manager\` installer. Please fix any issues and
try again."
    return 1
  }

  if [[ -f ~/.zshrc ]]; then
    info 'Using `sudo` to backup ~/.zshrc -> ~/.zshrc.bak'
    sudo mv ~/.zshrc ~/.zshrc.bak
  fi

  info 'Running `home-manager` installer'
  # TODO: handle interactive prompts, pass flags to answer questions?
  # why doesn't piping in `true` not work?
  # TODO: test piping `yes` to disable tty and automatically accept all prompts
  # ref: https://github.com/LnL7/nix-darwin/issues/278#issuecomment-769325254
  if yes | "$BUILD_DIR/result/activate"; then
    success '`home-manager` installed'
  else
    fail '`home-manager` installer failed. Please fix any issues and try again.'
    return 1
  fi

  popd > /dev/null || {
    fail 'probably not really an issue: failed to pop directory'
    return 1
  }

  command -v home-manager > /dev/null || {
    fail "\`home-manager\` installation finished but the \`home-manager\`
 command is not invokable. Please fix any issues and try again."
    return 1
  }

  success '`home-manager` setup complete'
}

main "$@"
