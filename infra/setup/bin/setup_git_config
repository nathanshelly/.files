#! /usr/bin/env bash

# set up a gitconfig (author name & email) based on
# $DOTFILES/utilities/git/gitconfig.template if no file exists at the given
# destination

# check that DOTFILES variable is defined
# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/../check_dotfiles_variable.sh"

destination="$1"

source "$DOTFILES/infra/scripts/prompts.sh"

main() {
  parse_input "$@"

  [[ -z $DOTFILES_SETUP_HEADLESS ]] || {
    # this script cannot be run headless, bail for that mode of install
    info "skipping git config setup in headless mode"
    return 0
  }

  [[ -z $destination ]] && {
    cat << EOF
error: the following arguments were not provided

  <GITCONFIG-DESTINATION>

USAGE:

  setup_git_config <GITCONFIG-DESTINATION>...
EOF
    return 1
  }

  if [ -f "$destination" ] || [ -d "$destination" ] || [ -L "$destination" ]; then
    [[ $SHOULD_SKIP_EXISTING == true ]] && {
      info "gitconfig creation skipped: $destination already exists"
      exit 0
    }
    user "file exists @ $destination, overwrite it? (y/any other key)"
    read -r -s -n 1 continue < /dev/tty

    [[ $continue != 'y' ]] && {
      info "gitconfig creation skipped"
      exit 0
    }
  fi

  info "setting up gitconfig @ $destination"

  user 'what is your git author name?'
  # `-e` uses `readline`
  read -re git_author_name
  user 'what is your git author email?'
  read -re git_author_email

  # `-e <script>` applies given script to input
  sed -e "s/AUTHORNAME/$git_author_name/g" \
    -e "s/AUTHOREMAIL/$git_author_email/g" \
    "$DOTFILES/utilities/git/gitconfig.template" \
    > "$destination"

  success "created gitconfig @ $destination"
}

# handle any arguments/flags
parse_input() {
  for opt in "$@"; do
    case $opt in
      --skip-existing)
        SHOULD_SKIP_EXISTING=true
        ;;
      --*)
        # shellcheck disable=SC2016
        printf 'invalid flag passed to `%s`\n' 'setup_git_config'
        exit 1
        ;;
    esac
  done
}

main "$@"
