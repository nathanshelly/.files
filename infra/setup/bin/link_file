#! /usr/bin/env bash

# check that DOTFILES variable is defined
# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/../check_dotfiles_variable.sh"

source "$DOTFILES/infra/scripts/prompts.sh"

# link single file between `src` & `dst`
#
# takes user input (potentially modified by `<option>_all` flags defined in
# calling scope)
#
# Args:
#   - {string} src - source path
#   - {string} dst - target path
link_file() {
  # parameters
  local src="$1" dst="$2"

  # flags set by user interaction
  local overwrite='' backup='' skip='' action=''
  local overwrite_all=false backup_all=false skip_all=false

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] \
      && [ "$backup_all" == "false" ] \
      && [ "$skip_all" == "false" ]; then
      local current_src
      current_src="$(readlink "$dst")"

      if [ "$current_src" == "$src" ]; then
        skip=true
      else
        user "file exists: $dst ($(basename "$src")), what do you want to do? \
  [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -r -s -n 1 action < /dev/tty

        case "$action" in
          o)
            overwrite=true
            ;;
          O)
            overwrite_all=true
            ;;
          b)
            backup=true
            ;;
          B)
            backup_all=true
            ;;
          s)
            skip=true
            ;;
          S)
            skip_all=true
            ;;
          *) ;;

        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    [ "$overwrite" == true ] && {
      if /bin/rm -r "$dst"; then
        success "removed $dst"
      else
        fail "failed to remove $dst"
      fi
    }

    [ "$backup" == true ] && {
      if mv "$dst" "${dst}.backup"; then
        success "moved $dst to ${dst}.backup"
      else
        fail "failed to move $dst to ${dst}.backup"
      fi
    }

    [ "$skip" == true ] && info "skipped $src"
  fi

  # "false" or empty
  [ "$skip" != true ] && {
    # `-s` for symbolic link
    if ln -s "$src" "$dst"; then
      success "linked $src to $dst"
    else
      fail "failed to link $src to $dst"
    fi
  }
}

link_file "$@"
