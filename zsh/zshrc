###################### END OF HOME-MANAGER DECLARED ZSHRC ######################

################################################################################

########################### START OF BESPOKE ZSHRC #############################

# This zshrc sources files in $DOTFILES/zsh & any `.zsh` files in the directory
# specified by "$DOTFILES" (set to `$HOME/.files` in `$DOTFILES/zsh/zshenv`)

# Note: script sourcing order matters (particularly with `nix`)
#
# This script will run after `.zshenv` (gaining access to any env vars created)
#
# refs:
# - https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/#zsh_configuration_files

# <<<< guards >>>>

[[ -v DOTFILES ]] || {
  echo '$DOTFILES not defined, `.zshenv` must not have run. Bailing on `.zshrc`'
  return 1
}

"$DOTFILES/infra/scripts/component_enabled.sh" 'zsh' || return 0

source "$DOTFILES/zsh/path.zsh"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
# ref - https://github.com/romkatv/powerlevel10k#what-is-instant-prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# <<<< files without dependencies >>>>

# store tokens/keys in `secrets.zsh`, gitignored to avoid checking in
[ -f "$DOTFILES/zsh/secrets.zsh" ] && source "$DOTFILES/zsh/secrets.zsh"

source "$DOTFILES/zsh/completion.zsh"
source "$DOTFILES/zsh/keymap.zsh"
source "$DOTFILES/zsh/manydots.zsh"

# <<<< files with dependencies >>>>
# these files depend either on executables made accessible via $PATH or code
# defined in earlier config files.
#
# note: some files here also define dependencies for later files so the ordering
# in this section matters (unlike in the previous two sections)

source "$DOTFILES/zsh/dynamic_env_vars.zsh"

source "$DOTFILES/zsh/functions.zsh"

# source after $DOTFILES/zsh/functions.zsh to allow aliasing those functions
source "$DOTFILES/zsh/alias.zsh"

# <<<< plugins >>>>
# managed via `zinit` - https://github.com/zdharma/zinit
# see more details in $DOTFILES/zsh/plugins.zsh
# below installer hunk added to this file (instead of internal to
# $DOTFILES/zsh/plugins.zsh) so that `zinit` avoids redundantly appending it

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p $HOME/.zinit
    command git clone https://github.com/zdharma/zinit $HOME/.zinit/bin && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%F" || \
        print -P "%F{160}▓▒░ The clone has failed.%F"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

# load and configure plugins
source "$DOTFILES/zsh/plugins.zsh"
# <<<< end of plugins >>>>

# run `p10k configure` or edit $DOTFILES/zsh/prompt.zsh to customize prompt

# prefer `~/.p10k.zsh` if it exists (likely from `p10k configure`)
if [[ -f $HOME/.p10k.zsh ]]; then
  source "$HOME/.p10k.zsh"
else
  # otherwise source default config
  source "$DOTFILES/zsh/prompt.zsh"
fi

# all *.zsh files throughout this repo exluding the $DOTFILES/zsh directory
# (technically excludes $DOTFILES/**/zsh)
#
# x~y matches anything that matches the pattern x but does not match y
# ref - http://zsh.sourceforge.net/Doc/Release/Expansion.html#Glob-Operators
# (search "x~y" to find documentation for the above described behavior)

# define variable to store list of files to source
# note: -U ensures uniqueness
typeset -U config_files
setopt extended_glob
config_files=($DOTFILES/**/*.zsh~*/zsh/*)
for config_file in $config_files; do source "$config_file"; done
unset config_files config_file
setopt no_extended_glob

# apply options, overriding any set for script purposes
#
# ref - http://zsh.sourceforge.net/Doc/Release/Options.html
#
# - `auto_cd` - type a bare path to perform `cd <path>`
#   - `$ ~/.files<Enter>` will `cd` to `~/.files`
#   - `$ ..<Enter>` will `cd` up a directory
# - `interactive_comments` - allow comments at the command line (zle)
# - `local_options` - reset any options on script return
# - history
#   - `hist_ignore_space` - don't save commands starting w/ ' ' to history
#     - useful if you want to run a command with secrets
#     - ref - https://superuser.com/a/352858
#   - `hist_ignore_all_dups` - treat '#', '~' & '^' as glob patterns
#   - `hist_reduce_blanks` - dedupe & remove lines differing only in whitespace
#   - `share_history` - sync history between simultaneous shells on prompt load
setopt auto_cd interactive_comments local_options
setopt hist_ignore_space hist_ignore_all_dups hist_reduce_blanks share_history

# make frameworks managed via channels (nix-darwin, home-manager) available
export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
# make nix-darwin use the config in this repo
export NIX_PATH=darwin-config=$DOTFILES/nix/darwin.nix${NIX_PATH:+:}$NIX_PATH

# any last local overrides, gitignored to avoid checking in
[ -f "$DOTFILES/zsh/local.zsh" ] && source "$DOTFILES/zsh/local.zsh"
