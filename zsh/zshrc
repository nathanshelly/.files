# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# This zshrc sources files in $DOTFILES/zsh & any `.zsh` files in the directory
# specified by "$DOTFILES" (set to `$HOME/.files` in `./zshenv.symlink`)
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# <<<< guards >>>>

[[ -v DOTFILES ]] || {
  echo '$DOTFILES not defined, `.zshenv` must not have run. Bailing on `.zshrc`'
  return 1
}

"$DOTFILES/infra/scripts/component_enabled.sh" 'zsh' || return 0

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
# ref - https://github.com/romkatv/powerlevel10k#what-is-instant-prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# <<<< files without dependencies >>>>

# store tokens/keys in `secrets.zsh`, gitignored to avoid checking in
[ -f "$DOTFILES/zsh/secrets.zsh" ] && source "$DOTFILES/zsh/secrets.zsh"

source "$DOTFILES/zsh/completion.zsh"
source "$DOTFILES/zsh/config.zsh"
source "$DOTFILES/zsh/keymap.zsh"
source "$DOTFILES/zsh/manydots.zsh"
source "$DOTFILES/zsh/options.zsh"

# $PATH configuration
# perform early so that executables are available for future config files
source "$DOTFILES/zsh/path.zsh"

# <<<< files with dependencies >>>>
# these files depend either on executables made accessible via $PATH or code
# defined in earlier config files.
#
# note: some files here also define dependencies for later files so the ordering
# in this section matters (unlike in the previous two sections)

source "$DOTFILES/zsh/dynamic_env_vars.zsh"

source "$DOTFILES/zsh/functions.zsh"

# source after $DOTFILES/zsh/functions.zsh to allow aliasing those functions
source "$DOTFILES/zsh/alias.zsh"

# <<<< plugins >>>>
# managed via `zinit` - https://github.com/zdharma/zinit
# see more details in $DOTFILES/zsh/plugins.zsh
# below installer hunk added to this file (instead of internal to
# $DOTFILES/zsh/plugins.zsh) so that `zinit` avoids redundantly appending it

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p $HOME/.zinit
    command git clone https://github.com/zdharma/zinit $HOME/.zinit/bin && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%F" || \
        print -P "%F{160}▓▒░ The clone has failed.%F"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

# load and configure plugins
source "$DOTFILES/zsh/plugins.zsh"
# <<<< end of plugins >>>>

# run `p10k configure` or edit $DOTFILES/zsh/p10k.zsh.symlink to customize prompt
# note: $DOTFILES/zsh/p10k.zsh.symlink is symlinked to ~/.p10k.zsh so that
# changes via `p10k configure` are reflected here & tracked.
source "$DOTFILES/zsh/p10k.zsh.symlink"

# all *.zsh files throughout this repo exluding the $DOTFILES/zsh directory
# (technically excludes $DOTFILES/**/zsh)
#
# x~y matches anything that matches the pattern x but does not match y
# ref - http://zsh.sourceforge.net/Doc/Release/Expansion.html#Glob-Operators
# (search "x~y" to find documentation for the above described behavior)

# define variable to store list of files to source
# note: -U ensures uniqueness
typeset -U config_files
# Note: this expansion requires the `extended_glob` option to be set
# this is done in `./options.zsh`
config_files=($DOTFILES/**/*.zsh~*/zsh/*)
for config_file in $config_files; do source "$config_file"; done
unset config_files config_file

# source asdf to give it final say on package versions
source "$DOTFILES/zsh/asdf.zsh"

# any last local overrides, gitignored to avoid checking in
[ -f "$DOTFILES/zsh/local.zsh" ] && source "$DOTFILES/zsh/local.zsh"
